#!/usr/bin/env node

var program = require('commander')
  , error = require('../lib/error')
  , Client = require('../lib/client')
  , ProgressBar = require('progress');

require('colors');

program
  .version(require('../package.json').version)
  .usage('[options] <url>')
  .option('-n, --requests [num]', 'number of requests (default: 100)', parseInt, 100)
  .option('-c, --clients [num]', 'number of concurrent clients (default: 1)', parseInt, 1)
  .option('-m, --method [http method]', 'http method (default: get)', 'get')
  .option('-a, --auth [username:password]', 'http authentication')
  .option('-b, --body [param=value&param...]', 'request body (postfields)')
  .option('-j, --json [{"key": "value"}] or [@/path/to/file.json]', 'request body as JSON')
  .option('-q, --querystring [param=value&param...]', 'querystring parameters')
  .option('-i, --interval [ms]', 'interval between requests (default: 0)', parseInt, 0)
  .option('-t, --timeout [secs]', 'request timeout (default: 15)', parseInt, 15)
  .parse(process.argv);

program.url = process.argv.pop();

// validations

if (process.argv.length === 1) {
  process.exit();
}

var validURL = new RegExp('(http|https)://(www.|)[a-z0-9.]{1,}')
  , validMethods = ['get', 'post', 'put', 'delete']
  , validAuth = new RegExp('[ .#$*!\-_a-zA-Z0-9]{1,}:[ .#$*!\-_a-zA-Z0-9]{1,}')
  , validParameters = new RegExp('[\-a-zA-Z0-9]{1,}=[\-a-zA-Z0-9]{1,}')

if (!program.url.match(validURL)) {
  error('Invalid URL', program.url, ['http://google.com', 'https://192.168.2.5:3000/path']);
}

if (validMethods.indexOf(program.method) === -1) {
  error('Invalid HTTP method', program.method, validMethods);
}

if (program.auth && !program.auth.match(validAuth)) {
  error('Invalid authentication', program.auth, ['username:password', 'us3rn4m3:lkp6!hiX']);
}

if (program.body && !program.body.match(validParameters)) {
  error('Invalid body', program.body, 'param=value&another=value');
}

if (program.json) {
  try {
    if (program.json.charAt(0) === '@') {
      program.json = JSON.parse(require('fs').readFileSync(program.json.slice(1)));
    } else {
      program.json = JSON.parse(program.json);
    }
  } catch(err) {
    error('Invalid JSON', program.json, ['{"key": "value", "hello": "world"}', '@/path/to/file.json']);
  }
}

if (program.querystring && !program.querystring.match(validParameters)) {
  error('Invalid querystring', program.querystring, 'param=value&another=value');
}

if (isNaN(program.requests) || program.requests === 0) {
  error('Invalid number of requests', program.requests, [123, 500, 1000]);
}

if (isNaN(program.clients) || program.clients === 0) {
  error('Invalid number of concurrent clients', program.clients, [5, 10, 20]);
}

if (isNaN(program.interval)) {
  error('Invalid interval', program.interval, [2, 5, 10]);
}

if (isNaN(program.timeout) || program.timeout === 0) {
  error('Invalid timeout', program.timeout, [20, 30, 60]);
}

// header of output

console.log();
console.log(('http-monster (httpmon) - ' + program.version()).bold.white);
console.log(new Date().toString().bold.white);
console.log();

var progressBar = new ProgressBar('Requesting '.yellow + '[:bar] :percent'.white, {
  complete: '=',
  incomplete: ' ',
  width: 20,
  total: program.requests * program.clients
});

// instantiating clients for requesting

var start = new Date().getTime();

for (var i = 0; i < program.clients; i++)
  new Client(program, progressBar);

progressBar.on('end', function() {
  var duration = new Date().getTime() - start;
  console.log('Time taken: '.bold.green + duration + 'ms (' + Math.floor(duration / 1000) + ' seconds)');
  console.log('Time per request (avg): '.bold.green + Math.floor(duration / program.requests) + 'ms');
  console.log('Last request: '.bold.green + new Date());
  console.log();
  process.exit();
});